<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在Raspberry pi上執行Yolov4和DeepSort</title>
    <link href="/2021/12/07/Raspberrypi_with_deepsort/"/>
    <url>/2021/12/07/Raspberrypi_with_deepsort/</url>
    
    <content type="html"><![CDATA[<h1 id="樹莓派-安裝-Yolov4-DeepSort"><a href="#樹莓派-安裝-Yolov4-DeepSort" class="headerlink" title="樹莓派 安裝 Yolov4 + DeepSort"></a>樹莓派 安裝 Yolov4 + DeepSort</h1><p>由於樹莓派沒有cuda可以使用，因此在訓練的速度就會稍慢一些，若是將來有其他AI應用又或是需要加快速度也可以考慮使用nvdia的nano jetson有cuda可以使用。</p><h2 id="一、樹莓派環境建置教學"><a href="#一、樹莓派環境建置教學" class="headerlink" title="一、樹莓派環境建置教學"></a>一、樹莓派環境建置教學</h2><h2 id="1-樹莓派規格表"><a href="#1-樹莓派規格表" class="headerlink" title="1. 樹莓派規格表"></a>1. 樹莓派規格表</h2><p>我手邊的樹莓派是Raspberry pi 4B，8 Gb的Ram，32Gb的記憶卡<br>參考資料:<a href="https://https//manuals.plus/m/ce6cc7107a28b3d5b6c944129b2fc7b4ed80ba77dcd9d2693bd9040a63bb768e_optim.pdf">連結</a></p><h2 id="2-燒入img檔進入SD卡"><a href="#2-燒入img檔進入SD卡" class="headerlink" title="2. 燒入img檔進入SD卡"></a>2. 燒入img檔進入SD卡</h2><h3 id="1-首先插入SD卡，並且下載Raspberry-Pi-OS的image檔安裝程式，往下滑可以看到下載連結，選擇自己的電腦環境下載"><a href="#1-首先插入SD卡，並且下載Raspberry-Pi-OS的image檔安裝程式，往下滑可以看到下載連結，選擇自己的電腦環境下載" class="headerlink" title="(1) 首先插入SD卡，並且下載Raspberry Pi OS的image檔安裝程式，往下滑可以看到下載連結，選擇自己的電腦環境下載"></a>(1) 首先插入SD卡，並且下載<a href="https://www.raspberrypi.com/software/">Raspberry Pi OS的image檔安裝程式</a>，往下滑可以看到下載連結，選擇自己的電腦環境下載</h3><p><img src="https://i.imgur.com/mG2H4GJ.png"><br><img src="https://i.imgur.com/1vDt2Cc.png"></p><h3 id="2-下載OS的img檔-2021-05-07-raspios-buster-arm64-zip"><a href="#2-下載OS的img檔-2021-05-07-raspios-buster-arm64-zip" class="headerlink" title="(2) 下載OS的img檔:2021-05-07-raspios-buster-arm64.zip"></a>(2) 下載OS的img檔:<a href="https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2021-05-28/2021-05-07-raspios-buster-arm64.zip">2021-05-07-raspios-buster-arm64.zip</a></h3><p>實測32位元的許多套件裝不起來，另外64位元也測過目前最新版Python3.9的版本也有一些套件不相容。</p><h3 id="2-開啟imager-1-6-2-exe檔案，並且執行安裝"><a href="#2-開啟imager-1-6-2-exe檔案，並且執行安裝" class="headerlink" title="(2) 開啟imager_1.6.2.exe檔案，並且執行安裝"></a>(2) 開啟imager_1.6.2.exe檔案，並且執行安裝</h3><p><img src="https://i.imgur.com/joBqDyz.png"></p><h3 id="3-安裝完成後開啟可以看到以下畫面"><a href="#3-安裝完成後開啟可以看到以下畫面" class="headerlink" title="(3) 安裝完成後開啟可以看到以下畫面"></a>(3) 安裝完成後開啟可以看到以下畫面</h3><p><img src="https://i.imgur.com/l8KqkKY.png"></p><h3 id="4-下載Raspberry-Pi-OS-64-bit-old-Buster-zip載點"><a href="#4-下載Raspberry-Pi-OS-64-bit-old-Buster-zip載點" class="headerlink" title="(4) 下載Raspberry Pi OS(64-bit): old Buster.zip載點"></a>(4) 下載Raspberry Pi OS(64-bit): <a href="https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2021-05-28/2021-05-07-raspios-buster-arm64.zip">old Buster.zip載點</a></h3><p>選擇安裝64位元是因為測試過32位元的環境，有許多相容性問題，因此安裝64位元的環境，並且也實測過較新版本的Bullseye.zip，安裝的是Python3.9版本，在後續安裝Tensorflow的時候目前會有些相容性問題，因此安裝舊版的Old Buster版本，其Python版本為3.7版本，因此將連結的img檔案載下來(<em><strong>2021-05-07-raspios-buster-arm64.zip</strong></em>)</p><h3 id="5-按-CHOOSE-OS-按鍵"><a href="#5-按-CHOOSE-OS-按鍵" class="headerlink" title="(5) 按 [CHOOSE OS]按鍵"></a>(5) 按 [CHOOSE OS]按鍵</h3><p><img src="https://i.imgur.com/JQjKupY.png"></p><h3 id="6-按-Use-custom-按鍵"><a href="#6-按-Use-custom-按鍵" class="headerlink" title="(6) 按 [Use custom]按鍵"></a>(6) 按 [Use custom]按鍵</h3><p><img src="https://i.imgur.com/Ai75arC.png"></p><h3 id="7-選擇剛剛下載的2021-05-07-raspios-buster-arm64-zip"><a href="#7-選擇剛剛下載的2021-05-07-raspios-buster-arm64-zip" class="headerlink" title="(7) 選擇剛剛下載的2021-05-07-raspios-buster-arm64.zip"></a>(7) 選擇剛剛下載的<em><strong>2021-05-07-raspios-buster-arm64.zip</strong></em></h3><p><img src="https://i.imgur.com/fcRN6Fa.png"></p><h3 id="8-接著可以看到CHOOSE-OS選項已經替換成Raspberry-Pi-OS-64-bit"><a href="#8-接著可以看到CHOOSE-OS選項已經替換成Raspberry-Pi-OS-64-bit" class="headerlink" title="(8) 接著可以看到CHOOSE OS選項已經替換成Raspberry Pi OS(64-bit)"></a>(8) 接著可以看到CHOOSE OS選項已經替換成Raspberry Pi OS(64-bit)</h3><p><img src="https://i.imgur.com/ohC6k6g.png"></p><h3 id="9-於是接這選擇儲存空間CHOOSE-STORAGE，並選擇SD卡"><a href="#9-於是接這選擇儲存空間CHOOSE-STORAGE，並選擇SD卡" class="headerlink" title="(9) 於是接這選擇儲存空間CHOOSE STORAGE，並選擇SD卡"></a>(9) 於是接這選擇儲存空間CHOOSE STORAGE，並選擇SD卡</h3><p><img src="https://i.imgur.com/a3RMDXQ.png"></p><h3 id="10-完成後開始執行write"><a href="#10-完成後開始執行write" class="headerlink" title="(10) 完成後開始執行write"></a>(10) 完成後開始執行write</h3><p><img src="https://i.imgur.com/L5tThox.png"></p><h3 id="11-並選擇Yes"><a href="#11-並選擇Yes" class="headerlink" title="(11) 並選擇Yes"></a>(11) 並選擇Yes</h3><p><img src="https://i.imgur.com/1Pi07ZS.png"></p><h3 id="12-開始執行寫入記憶卡，並慢慢等待寫入完成"><a href="#12-開始執行寫入記憶卡，並慢慢等待寫入完成" class="headerlink" title="(12) 開始執行寫入記憶卡，並慢慢等待寫入完成"></a>(12) 開始執行寫入記憶卡，並慢慢等待寫入完成</h3><p><img src="https://i.imgur.com/Y288Kn2.png"></p><h3 id="13-完成後即可將SD卡插入樹莓派裡面，並插上滑鼠及鍵盤開機"><a href="#13-完成後即可將SD卡插入樹莓派裡面，並插上滑鼠及鍵盤開機" class="headerlink" title="(13) 完成後即可將SD卡插入樹莓派裡面，並插上滑鼠及鍵盤開機"></a>(13) 完成後即可將SD卡插入樹莓派裡面，並插上滑鼠及鍵盤開機</h3><p>開機後首先進行密碼的設定(此密碼為後續SSH的連線密碼)、並執行wifi的設定。</p><h2 id="3-建議開啟SSH連線及VNC遠端桌面-可安裝可不安裝，如不安裝跳到下一個步驟"><a href="#3-建議開啟SSH連線及VNC遠端桌面-可安裝可不安裝，如不安裝跳到下一個步驟" class="headerlink" title="3.建議開啟SSH連線及VNC遠端桌面 [可安裝可不安裝，如不安裝跳到下一個步驟]"></a>3.建議開啟SSH連線及VNC遠端桌面 [可安裝可不安裝，如不安裝跳到下一個步驟]</h2><h3 id="1-建議開啟SSH及VNC可以加速開發，有兩種方式開啟"><a href="#1-建議開啟SSH及VNC可以加速開發，有兩種方式開啟" class="headerlink" title="(1) 建議開啟SSH及VNC可以加速開發，有兩種方式開啟"></a>(1) 建議開啟SSH及VNC可以加速開發，有兩種方式開啟</h3><ul><li><p>方法一：於command line輸入以下指令開啟</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ sudo raspi-config<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/5eGQMay.png"><br>可以進入以下頁面，並選擇第三個[Inyerface Options]：<br><img src="https://i.imgur.com/V3yYIvb.png"><br>進入後可以看到[P2 SSH]跟[P3 VNC]均開啟<br><img src="https://i.imgur.com/fKfkWfQ.png"></p></li><li><p>方法二<br>由GUI進入[Raspberry Pi設定]<br><img src="https://i.imgur.com/UTc0fzi.png"><br>並在第三個介面分頁去開啟SSH和VNC<br><img src="https://i.imgur.com/6pAlVli.png"></p></li></ul><h3 id="2-接著輸入在終端機輸入ifconfig檢查ip位置，可以看到樹莓派的IP位置"><a href="#2-接著輸入在終端機輸入ifconfig檢查ip位置，可以看到樹莓派的IP位置" class="headerlink" title="(2) 接著輸入在終端機輸入ifconfig檢查ip位置，可以看到樹莓派的IP位置"></a>(2) 接著輸入在終端機輸入ifconfig檢查ip位置，可以看到樹莓派的IP位置</h3><p><img src="https://i.imgur.com/eOQRmLG.png"></p><h3 id="3-在連線開發的電腦上進行SSH連線，於cmd輸入以下指令"><a href="#3-在連線開發的電腦上進行SSH連線，於cmd輸入以下指令" class="headerlink" title="(3) 在連線開發的電腦上進行SSH連線，於cmd輸入以下指令"></a>(3) 在連線開發的電腦上進行SSH連線，於cmd輸入以下指令</h3><p>將&lt;你剛剛查到的IP位置&gt;替換成樹莓派的IP位置，並輸入一開始設定的密碼</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">pi@<span class="hljs-keyword">&lt;你剛剛查到的IP位置&gt;</span></span>  <br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/CLJsFTJ.png"><br>這樣就連線完成了，如下圖所示<br><img src="https://i.imgur.com/AZOu92s.png"></p><h3 id="4-連線開發的電腦上下載VNC-Viewer執行程式：載點"><a href="#4-連線開發的電腦上下載VNC-Viewer執行程式：載點" class="headerlink" title="(4) 連線開發的電腦上下載VNC Viewer執行程式：載點"></a>(4) 連線開發的電腦上下載VNC Viewer執行程式：<a href="https://www.realvnc.com/en/connect/download/viewer/">載點</a></h3><p>下載安裝後開啟檔案為此畫面<br><img src="https://i.imgur.com/9htqCB5.png"><br>並在上面欄位輸入ip位置可以增加新的主機連線設定<br><img src="https://i.imgur.com/vggNbx4.png"><br>並且在Username欄位輸入pi，並key in剛剛SSH連線的密碼，即可以完成連線<br><img src="https://i.imgur.com/HTgD3HR.png"></p><h2 id="4-進行Memory-Swapping的設定"><a href="#4-進行Memory-Swapping的設定" class="headerlink" title="4.進行Memory Swapping的設定"></a>4.進行Memory Swapping的設定</h2><h3 id="1-一樣在終端機上輸入各行-的指令，-符號為註解不用輸入"><a href="#1-一樣在終端機上輸入各行-的指令，-符號為註解不用輸入" class="headerlink" title="(1) 一樣在終端機上輸入各行$的指令，#符號為註解不用輸入"></a>(1) 一樣在終端機上輸入各行$的指令，#符號為註解不用輸入</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># remove the old dphys version</span><br>$ sudo <span class="hljs-regexp">/etc/i</span>nit.d/dphys-swapfile stop<br>$ sudo apt-get remove --purge dphys-swapfile<br><span class="hljs-comment"># install zram</span><br>$ sudo wget -O <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/zram.sh https:/</span><span class="hljs-regexp">/raw.githubusercontent.com/</span>novaspirit<span class="hljs-regexp">/rpi_zram/m</span>aster/zram.sh<br><span class="hljs-comment"># set autoload</span><br>$ sudo nano <span class="hljs-regexp">/etc/</span>rc.local<br><span class="hljs-comment"># add the next line before exit 0</span><br><span class="hljs-regexp">/usr/</span>bin/zram.sh &amp;<br><span class="hljs-comment"># save with &lt;Ctrl+X&gt;, &lt;Y&gt; and &lt;Enter&gt;</span><br></code></pre></td></tr></table></figure><p>在執行到sudo nano /etc/rc.local時針對檔案進行修改需增加”/usr/bin/zram.sh &amp;”這一行，如下圖<br><img src="https://i.imgur.com/nXpyV1I.png"><br>加完後按下[Ctrl+X], [Y] and [Enter]，儲存檔案</p><h3 id="2-修改zram-sh檔案-一樣執行-命令、-不用執行"><a href="#2-修改zram-sh檔案-一樣執行-命令、-不用執行" class="headerlink" title="(2) 修改zram.sh檔案 (一樣執行$命令、#不用執行)"></a>(2) 修改zram.sh檔案 (一樣執行$命令、#不用執行)</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo chmod +x <span class="hljs-regexp">/usr/</span>bin/zram.sh<br>$ sudo nano <span class="hljs-regexp">/usr/</span>bin/zram.sh<br><span class="hljs-comment"># alter the limit with * 3</span><br>mem=$(( (<span class="hljs-variable">$totalmem</span> / <span class="hljs-variable">$cores</span>)* <span class="hljs-number">1024</span> * <span class="hljs-number">3</span>))<br><span class="hljs-comment"># save with &lt;Ctrl+X&gt;, &lt;Y&gt; and &lt;Enter&gt;</span><br>$ sudo reboot<br></code></pre></td></tr></table></figure><p>一樣在sudo nano /usr/bin/zram.sh進行檔案修改，如下圖<br><img src="https://i.imgur.com/1PWfAL5.png"></p><h3 id="3-執行free-m及htop指令確認Swap空間有多大"><a href="#3-執行free-m及htop指令確認Swap空間有多大" class="headerlink" title="(3) 執行free -m及htop指令確認Swap空間有多大"></a>(3) 執行free -m及htop指令確認Swap空間有多大</h3><p>下圖為參考網站之圖片<br><img src="https://i.imgur.com/iisGct8.png"><br>而我手邊的樹莓派測試如下圖：<br><img src="https://i.imgur.com/i9e4Fr9.png"><br><img src="https://i.imgur.com/Q1hNwpV.png"><br>基本上容量一定要大於3G以上好像後續安裝其他套件才不會有問題，由於我空間很大後續沒遇到一些memory不夠的問題</p><h2 id="5-更新套件資料"><a href="#5-更新套件資料" class="headerlink" title="5. 更新套件資料"></a>5. 更新套件資料</h2><p>輸入以下指令更新OS</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># refresh your OS</span><br>$ sudo apt-<span class="hljs-builtin-name">get</span> update<br>$ sudo apt-<span class="hljs-builtin-name">get</span> upgrade<br></code></pre></td></tr></table></figure><hr><h1 id="二、YoloV4及Deep-Sort相關環境安裝教學"><a href="#二、YoloV4及Deep-Sort相關環境安裝教學" class="headerlink" title="二、YoloV4及Deep Sort相關環境安裝教學"></a>二、YoloV4及Deep Sort相關環境安裝教學</h1><p>安裝Yolo以及Deep Sort總共有以下幾個套件需要安裝：</p><ul><li>Pytorch</li><li>TorchVision</li><li>TensorFlow</li><li>OpenCV</li></ul><p>安裝完成後即可已開始執行Deep Sort的專案測試，不過由於樹梅派的linux是屬於arm架構的不同於一般Ubuntu是x86架構，因此所有的安裝檔都需要自己編譯過的wheel檔才可以進行安裝，因此我找到了許多人家的wheel檔來進行安裝，若有版本相容性問題了話，就只能進行自己編譯wheel檔(很耗時要花幾小時來編一個套件)</p><h2 id="1-安裝Pytorch"><a href="#1-安裝Pytorch" class="headerlink" title="1. 安裝Pytorch"></a>1. 安裝Pytorch</h2><p>版本確認以及空間大小比3G還大<br><img src="https://i.imgur.com/bxqpF0f.png"></p><p>輸入以下指令安裝相關套件，若沒有嚴重的error及進行下一行安裝</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># get a fresh start</span><br>$ sudo apt-<span class="hljs-builtin-name">get</span> update<br>$ sudo apt-<span class="hljs-builtin-name">get</span><span class="hljs-built_in"> upgrade</span><br><span class="hljs-built_in"></span><span class="hljs-comment"># install the dependencies (if not already onboard)</span><br>$ sudo apt-<span class="hljs-builtin-name">get</span> install python3-pip libopenblas-dev libopenmpi-dev libomp-dev<br><span class="hljs-comment"># upgrade setuptools 47.1.1 -&gt; 58.3.0</span><br>$ sudo -H pip3 install --upgrade setuptools<br>$ sudo -H pip3 install Cython<br><span class="hljs-comment"># install gdown to download from Google drive</span><br>$ sudo -H pip3 install gdown<br></code></pre></td></tr></table></figure><p>下載人家編譯好的wheel檔案，並進行安裝</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># download the wheel</span><br><span class="hljs-variable">$ </span>gdown <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/drive.google.com/uc</span>?id=<span class="hljs-number">1</span>CQLbc2jUQoh86YMI4mslS2Dj0wZrHpk-<br><span class="hljs-comment"># install PyTorch 1.10.0</span><br><span class="hljs-variable">$ </span>sudo -H pip3 install torch<span class="hljs-number">-1.10</span>.0a0+git36449ea-cp37-cp37m-linux_aarch64.whl<br><span class="hljs-comment"># clean up</span><br><span class="hljs-variable">$ </span>rm torch<span class="hljs-number">-1.10</span>.0a0+git36449ea-cp37-cp37m-linux_aarch64.whl<br></code></pre></td></tr></table></figure><p>安裝完成後可以進行以下測試：<br><img src="https://i.imgur.com/d7JVgqi.png"><br>如果有出現版本資訊代表安裝成功</p><h2 id="2-安裝TorchVision"><a href="#2-安裝TorchVision" class="headerlink" title="2. 安裝TorchVision"></a>2. 安裝TorchVision</h2><p>同樣方法首先執行一些相依性的套件安裝</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs q"># the dependencies<br>$ sudo apt-<span class="hljs-built_in">get</span> install libjpeg-<span class="hljs-built_in">dev</span> zlib1g-<span class="hljs-built_in">dev</span> libpython3-<span class="hljs-built_in">dev</span><br>$ sudo apt-<span class="hljs-built_in">get</span> install libavcodec-<span class="hljs-built_in">dev</span> libavformat-<span class="hljs-built_in">dev</span> libswscale-<span class="hljs-built_in">dev</span><br># install gdown to download <span class="hljs-keyword">from</span> Google drive, if <span class="hljs-built_in">not</span> done yet<br>$ sudo -H pip3 install gdown<br></code></pre></td></tr></table></figure><p>並且開始執行人家編譯好的wheel檔進行安裝</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># download TorchVision 0.11.0</span><br><span class="hljs-variable">$ </span>gdown <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/drive.google.com/uc</span>?id=<span class="hljs-number">11</span>Eqrt1lfBNqeTOkQ0-UaGe4OgQekB6NT<br><span class="hljs-comment"># install TorchVision 0.11.0</span><br><span class="hljs-variable">$ </span>sudo -H pip3 install torchvision-0.<span class="hljs-number">11.0</span>a0+fa347eb-cp37-cp37m-linux_aarch64.whl<br><span class="hljs-comment"># clean up</span><br><span class="hljs-variable">$ </span>rm torchvision-0.<span class="hljs-number">11.0</span>a0+fa347eb-cp37-cp37m-linux_aarch64.whl<br></code></pre></td></tr></table></figure><p>一樣安裝完成後可以輸入以下指令進行測試：<br><img src="https://i.imgur.com/1yh35zK.png"><br>若是有出現版本號代表已經安裝成功即可以進行下一步。</p><h2 id="3-安裝TensorFlow"><a href="#3-安裝TensorFlow" class="headerlink" title="3. 安裝TensorFlow"></a>3. 安裝TensorFlow</h2><p>輸入以下指令進行安裝</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># get a fresh start (remember, the 64-bit OS is still under development)</span><br><span class="hljs-variable">$ </span>sudo apt-get update<br><span class="hljs-variable">$ </span>sudo apt-get upgrade<br><span class="hljs-comment"># install pip and pip3</span><br><span class="hljs-variable">$ </span>sudo apt-get install python-pip python3-pip<br><span class="hljs-comment"># remove old versions, if not placed in a virtual environment (let pip search for them)</span><br><span class="hljs-variable">$ </span>sudo pip uninstall tensorflow<br><span class="hljs-variable">$ </span>sudo pip3 uninstall tensorflow<br><span class="hljs-comment"># install the dependencies (if not already onboard)</span><br><span class="hljs-variable">$ </span>sudo apt-get install gfortran<br><span class="hljs-variable">$ </span>sudo apt-get install libhdf5-dev libc-ares-dev libeigen3-dev<br><span class="hljs-variable">$ </span>sudo apt-get install libatlas-base-dev libopenblas-dev libblas-dev<br><span class="hljs-variable">$ </span>sudo apt-get install liblapack-dev<br><span class="hljs-variable">$ </span>sudo -H pip3 install pybind11<br><span class="hljs-variable">$ </span>sudo -H pip3 install Cython==0.<span class="hljs-number">29.21</span><br><span class="hljs-comment"># install h5py with Cython version 0.29.21 (± 6 min @1950 MHz)</span><br><span class="hljs-variable">$ </span>sudo -H pip3 install h5py==<span class="hljs-number">2.10</span>.0<br><span class="hljs-comment"># upgrade setuptools 40.8.0 -&gt; 50.3.2</span><br><span class="hljs-variable">$ </span>sudo -H pip3 install --upgrade setuptools<br><span class="hljs-comment"># install gdown to download from Google drive</span><br><span class="hljs-variable">$ </span>pip3 install gdown<br><span class="hljs-comment"># download the wheel</span><br><span class="hljs-variable">$ </span>gdown <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/drive.google.com/uc</span>?id=<span class="hljs-number">1</span>fR9lsi_bsI_npPFB-wZyvgjbO0V9FbMf<br><span class="hljs-comment"># install TensorFlow (± 63 min @1950 MHz)</span><br><span class="hljs-variable">$ </span>sudo -H pip3 install tensorflow<span class="hljs-number">-2.2</span>.0-cp37-cp37m-linux_aarch64.whl<br></code></pre></td></tr></table></figure><p>安裝完成後可以進行以下指令進行測試：<br><img src="https://i.imgur.com/2L68BqU.png"><br>若有出現版本號代表安裝成功。</p><h2 id="4-安裝OpenCV"><a href="#4-安裝OpenCV" class="headerlink" title="4. 安裝OpenCV"></a>4. 安裝OpenCV</h2><p>進行OpenCV的安裝</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo apt <span class="hljs-keyword">install</span> python3-opencv<br></code></pre></td></tr></table></figure><p>安裝完成後輸入以下指令進行測試<br><img src="https://i.imgur.com/DI7WoVv.png"></p><hr><h1 id="三、開始執行DeepSort相關程式開發測試"><a href="#三、開始執行DeepSort相關程式開發測試" class="headerlink" title="三、開始執行DeepSort相關程式開發測試"></a>三、開始執行DeepSort相關程式開發測試</h1><p>(注意一下在SSH下指令好像會出現Sever connect error，請在VNC下)</p><h2 id="1-下載DeepSort相關資料"><a href="#1-下載DeepSort相關資料" class="headerlink" title="1. 下載DeepSort相關資料"></a>1. 下載DeepSort相關資料</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theAIGuysCode/y</span>olov4-deepsort<br>$ cd yolov4-deepsort/<br></code></pre></td></tr></table></figure><h2 id="2-修改需要安裝套件之資訊"><a href="#2-修改需要安裝套件之資訊" class="headerlink" title="2. 修改需要安裝套件之資訊"></a>2. 修改需要安裝套件之資訊</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo nano requirements.txt<br></code></pre></td></tr></table></figure><p>將其版本”==”後面指定版本刪掉<br><img src="https://i.imgur.com/hyroM98.png"><br>執行安裝，若有報錯誤不予理會</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ pip3 <span class="hljs-keyword">install</span> -r requirements.txt<br></code></pre></td></tr></table></figure><h2 id="3-修改object-tracker-py檔案"><a href="#3-修改object-tracker-py檔案" class="headerlink" title="3. 修改object_tracker.py檔案"></a>3. 修改object_tracker.py檔案</h2><p>由於同使include進來OpenCV跟TensorFlow模組會有錯誤，解決辦法將有cv2相關的套件放到第一位<br><img src="https://i.imgur.com/RqvbESw.png"><br>在/yolov4-deepsort/save_model.py以及/yolov4-deepsort/object_tracker.py檔案裡，將cv2相關的套件移到第一位</p><ul><li><p>其中save_model.py裡，”import core.utils as utils”這行有引用到cv2模組因此需移到第一位，可以使用VNC的GUI進行直接修改或是下”sudo nano save_model.py”進行修改<br><img src="https://i.imgur.com/P3XWOiM.png"></p></li><li><p>object_tracker.py裡的cv2模組移到第一位，可以使用VNC的GUI進行直接修改或是下”sudo nano object_tracker.py”進行修改<br><img src="https://i.imgur.com/CHnoZku.png"></p></li></ul><h2 id="4-安裝easydict套件"><a href="#4-安裝easydict套件" class="headerlink" title="4. 安裝easydict套件"></a>4. 安裝easydict套件</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo pip3 <span class="hljs-keyword">install</span> easydict<br></code></pre></td></tr></table></figure><h2 id="5-安裝matplotlib套件"><a href="#5-安裝matplotlib套件" class="headerlink" title="5. 安裝matplotlib套件"></a>5. 安裝matplotlib套件</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo apt <span class="hljs-keyword">install</span> python3-matplotlib<br></code></pre></td></tr></table></figure><h2 id="6-下載YOLOv4-Pre-trained-Weights"><a href="#6-下載YOLOv4-Pre-trained-Weights" class="headerlink" title="6.下載YOLOv4 Pre-trained Weights"></a>6.下載YOLOv4 Pre-trained Weights</h2><p>下載已訓練好的權重包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># download yolov4 model weights to data folder</span><br>$ wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AlexeyAB/</span>darknet<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/darknet_yolo_v3_optimal/y</span>olov4.weights -P data/<br></code></pre></td></tr></table></figure><h2 id="7-Convert-YOLOv4-Darknet-Weights-to-TensorFlow-model"><a href="#7-Convert-YOLOv4-Darknet-Weights-to-TensorFlow-model" class="headerlink" title="7. Convert YOLOv4 Darknet Weights to TensorFlow model"></a>7. Convert YOLOv4 Darknet Weights to TensorFlow model</h2><p>將權重轉換為tensorflow model，須注意有文獻提到在轉換過程因為容量不夠大好像會有轉換失敗問題(在此我沒有碰到)</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"># Convert darknet weights to tensorflow <span class="hljs-keyword">model</span><br><span class="hljs-symbol">$</span> python3 save_model.py --<span class="hljs-keyword">model</span> yolov4<br></code></pre></td></tr></table></figure><h2 id="8-Running-DeepSort-with-YOLOv4"><a href="#8-Running-DeepSort-with-YOLOv4" class="headerlink" title="8. Running DeepSort with YOLOv4"></a>8. Running DeepSort with YOLOv4</h2><p>開始執行DeepSort，此時會將每一個FPS進行目標的標記，不過由於是full的yolov4所以執行需要花一段時間，若是想要加快速度其實可以換成yolov4-tiny版本的權重，但是會犧牲一點準確性。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># run DeepSort with YOLOv4 Object Detections as backbone (enable --info flag to see info about tracked objects)</span><br>$ python3 object_tracker.py <span class="hljs-params">--video</span> <span class="hljs-string">./data/video/test.mp4</span> <span class="hljs-params">--output</span> <span class="hljs-string">./outputs/tracker.avi</span> <span class="hljs-params">--model</span> yolov4 <span class="hljs-params">--dont_show</span> <span class="hljs-params">--info</span><br></code></pre></td></tr></table></figure><p>完成後可以在ouput資料夾內看到tracker.avi檔案<br><img src="https://i.imgur.com/7KQXsIr.png"><br>可以看到影片檔已進行Deep Sort<br><img src="https://i.imgur.com/Umf6pY0.png"></p><hr><h1 id="四、參考資料"><a href="#四、參考資料" class="headerlink" title="四、參考資料"></a>四、參考資料</h1><ul><li><a href="https://qengineering.eu/install-raspberry-64-os.html">64位元OS安裝</a></li><li><a href="https://qengineering.eu/install-pytorch-on-raspberry-pi-4.html">安裝Pytorch跟TorchVision</a></li><li><a href="https://qengineering.eu/install-tensorflow-2.2.0-on-raspberry-64-os.html">安裝Tensorflow</a></li><li><a href="https://littlebirdelectronics.com.au/guides/165/set-up-opencv-on-raspberry-pi-4">安裝OpenCv</a></li><li><a href="https://qengineering.eu/install-opencv-4.5-on-raspberry-64-os.html">OpenCV與Tensorflow衝突解決辦佱</a></li><li><a href="https://pythonrepo.com/repo/theAIGuysCode-yolov4-deepsort-python-deep-learning">DeepSort專案</a></li><li><a href="https://colab.research.google.com/drive/1zmeSTP3J5zu2d5fHgsQC06DyYEYJFXq1?usp=sharing">DeepSort範例Colab</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深度學習PyTorch基本操作</title>
    <link href="/2021/11/22/PyTorch_Basic/"/>
    <url>/2021/11/22/PyTorch_Basic/</url>
    
    <content type="html"><![CDATA[<h1 id="深度學習PyTorch基本操作"><a href="#深度學習PyTorch基本操作" class="headerlink" title="深度學習PyTorch基本操作 "></a>深度學習PyTorch基本操作 <span id="more"></span></h1><hr><p>大家都知道<strong>深度學習</strong>常用的兩個框架：</p><ul><li>PyTorch</li><li>Tensorflow<br>這兩個比較起來，Tensorflow相對好上手，不過兩者都有各自的愛好者擁戴。那今天就先來介紹一下PyTorch的基本操作吧。以下的操作適合在Google的Colab裡面執行。</li></ul><hr><h2 id="1-甚麼是Tensor"><a href="#1-甚麼是Tensor" class="headerlink" title="1.甚麼是Tensor?"></a>1.甚麼是Tensor?</h2><p>所謂張量Tensor就數學的定義來看，0階的張量就是純量、1階的張量就是向量、二階的張量就是矩陣也可以為二維的向量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>z = torch.Tensor(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">##後面引數為其維度</span><br>z   <span class="hljs-comment">##用多維的list去達成張量</span><br></code></pre></td></tr></table></figure><p>其輸出結果：<br>tensor([[2.8339e+01, 3.0683e-41, 7.0065e-44, 6.8664e-44, 6.3058e-44],<br>        [6.7262e-44, 7.9874e-44, 6.3058e-44, 7.0065e-44, 7.8473e-44],<br>        [1.1771e-43, 6.8664e-44, 7.0065e-44, 8.1275e-44, 7.0065e-44],<br>        [7.8473e-44, 8.1275e-44, 6.7262e-44, 7.7071e-44, 6.4460e-44]])</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#dtype為data type可以印出資料型態 </span><br><span class="hljs-comment">#裡面的.float32代表他的浮點數用float32做計算</span><br><span class="hljs-comment">#.dtype可以用來驗證兩個tensor有沒有一樣</span><br>z.dtype<br></code></pre></td></tr></table></figure><p>其輸出結果為：<br>torch.float32</p><hr><h2 id="2-浮點數的Tensor宣告方法"><a href="#2-浮點數的Tensor宣告方法" class="headerlink" title="2.浮點數的Tensor宣告方法"></a>2.浮點數的Tensor宣告方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.FloatTensor(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">##浮點數的Tensor宣告方法</span><br>a<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>tensor([[2.8328e+01, 3.0683e-41, 7.0065e-44, 6.8664e-44, 6.3058e-44],<br>        [6.7262e-44, 7.9874e-44, 6.3058e-44, 7.0065e-44, 7.8473e-44],<br>        [1.1771e-43, 6.8664e-44, 7.0065e-44, 8.1275e-44, 7.1466e-44],<br>        [7.1466e-44, 8.1275e-44, 7.2868e-44, 6.7262e-44, 6.4460e-44]])</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">b = torch.FloatTensor([[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]])  <span class="hljs-comment">##  [[2,3]]代表二維</span><br>b<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>tensor([[2., 3.],[4., 5.]])</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a.dtype<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>torch.float32</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">b.dtype<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>torch.float32</p><hr><h2 id="3-整數的Tensor宣告方法"><a href="#3-整數的Tensor宣告方法" class="headerlink" title="3.整數的Tensor宣告方法"></a>3.整數的Tensor宣告方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.IntTensor(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">##宣告為整數的Tensor</span><br>a<br></code></pre></td></tr></table></figure><p>其輸出結果：<br><img src="https://i.imgur.com/lv6lEcO.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">b = torch.IntTensor([[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]])<br>b<br></code></pre></td></tr></table></figure><p>其輸出結果：<br><img src="https://i.imgur.com/SuxiwXP.png"></p><hr><h2 id="4-浮點數的Tensor跟整數的Tensor相加結果會如何"><a href="#4-浮點數的Tensor跟整數的Tensor相加結果會如何" class="headerlink" title="4.浮點數的Tensor跟整數的Tensor相加結果會如何?"></a>4.浮點數的Tensor跟整數的Tensor相加結果會如何?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y = a + z<br>y<br></code></pre></td></tr></table></figure><p>其輸出結果：<br><img src="https://i.imgur.com/kt3r4z8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">y.dtype<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>torch.float32</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>雜記</title>
    <link href="/2021/11/16/Hello/"/>
    <url>/2021/11/16/Hello/</url>
    
    <content type="html"><![CDATA[<h1 id="半路出家的資訊工程師-amp-機械工程師"><a href="#半路出家的資訊工程師-amp-機械工程師" class="headerlink" title="半路出家的資訊工程師 &amp; 機械工程師 "></a>半路出家的資訊工程師 &amp; 機械工程師 <span id="more"></span></h1><hr><p><strong>大家好，我是Stephen，我是一個雙碩士的資訊工程師</strong> </p><ul><li>105年畢業於交大機械碩士班自動控制組</li><li>在109年以第三名入學甄試進來中興資訊工程與科學學系就讀在職專班</li></ul><p><strong>目前在於中興大學喻石生老師門下，來說說為啥我會想要再念一個資工碩士好了有以下幾個原因：</strong></p><ul><li>機械系傳統產業普通低薪，工研院的薪資竟然也有PR75以上了，其中有很多慣老闆。</li><li>機械系主要是學理推導，但到了最後還是不免俗的要導入Deep Learning，簡單說就是技術瓶頸啦。<br>(工業4.0之後甚至到Digital Twin完全脫離不了AIoT等相關技術)</li><li>當然最重要的是我小時候覺得那些駭客真的好厲害，後來漸漸對程式語言有莫大的好奇心(但長大後才發現不是每個資訊工程師都是駭客)</li></ul><hr><h2 id="一、交大機械碩士生的我"><a href="#一、交大機械碩士生的我" class="headerlink" title="一、交大機械碩士生的我"></a>一、交大機械碩士生的我</h2><p>我高中畢業後，大學就讀於<strong>台灣科技大學工程不分系</strong>，後來大二分流進入了機械系，單單僅是因為不想碰化學，不是因為我化學不好而是討厭背科，其實現在回想以前很想說其實台灣的教育是蠻失敗的，小孩完全不知道自己的興趣所在。</p><p>讀著讀著，我很早就決定，我要大學瘋狂的玩，然後在瘋狂地念書考研究所，所以其實大學四年該玩得我都有玩到，後來研究所考試也誤打誤撞的考進<strong>交大機械研究所自動控制組</strong>。</p><blockquote><p><strong>但交大研究所這段時間卻是我人生中另外轉捩點。</strong></p></blockquote><p>原因在於大學時期因為大一跳級選修大二的C語言程式，剛好選到了一位大刀老師，一位思緒很跳躍的老師，很遺憾的這堂課沒有點名分數，我再怎麼認真，同學都是學長姊完全沒有人照應討論，想當然我就只好二退了，至此我開始害怕程式語言。</p><p>上了研究所後，是我人生中第一次好好的回想起大學所學的C語言，於是開始了我的啟蒙之路，從最基本的8051開始，了解時脈的CLK、程式的執行緒、開始懂基本的GPIO、暫存器、RAM、SRAM、FLASH，漸漸地也開始學到了很多的電路Protocol，像是Uart、I2C、SPI、RS232等等</p><p>慢慢的我也開始跨入了不同單晶片的世代，Arduino、Raspberry pi，那時候開始學習了很多電子電機相關的知識，高等電路學等等，開始寫起了Ti MSP430系列及DSP F28305相關的韌體。</p><p>後來實驗室進了一台當時最火熱的3D印表機，從此我也日日夜夜的在印很多自己畫的機構，那當然在我的碩論裡肯定是要用上我自己畫的機構，Solidworks圖如下：<br><img src="https://i.imgur.com/dxyY1Vb.jpg" alt="自走車"><br>實際的成品如下：<br><img src="https://i.imgur.com/uogfUZE.jpg"><br><img src="https://i.imgur.com/rrvP6s6.jpg"></p><p>整體的架構像下面這張圖：<br><img src="https://i.imgur.com/P5A6FKz.png"></p><p>最後寫了一隻Android控制APP來控制整顆球的運動：<br><img src="https://i.imgur.com/ArOHB6L.png"></p><p>當然不免俗的碩論還有一堆公式推導，這部分頗無聊就容我在此省略哈</p><hr><h2 id="二、機械工程師的我"><a href="#二、機械工程師的我" class="headerlink" title="二、機械工程師的我"></a>二、機械工程師的我</h2><p>105年交大畢業後，進來了<strong>工研院智慧機械中心開始擔任研發替代役副工程師</strong>，開始了我磨練C語言的底子，我們部門主要研發車床控制器，如果你不知道甚麼是車床請參考以下，他就是一種金屬加工的機器(人稱機械母機)<br><a href="https://zh.wikipedia.org/wiki/%E8%BB%8A%E5%BA%8A">車床維基百科</a></p><p><strong>我主要負責的項目有：</strong></p><ul><li><strong>一鍵調機開發(高階曲線擬合)</strong></li><li><strong>頻率響應波德圖功能開發(涉及了FFT等相關技術之後有機會在分享給大家)</strong> </li><li><strong>馬達慣量估測功能開發</strong></li><li><strong>主軸動平衡技術開發</strong></li></ul><p><strong>在這些項目中我把研究所所學的所有工程數學都拿出來用了，矩陣運算、傅立葉轉換、Laplace轉換、古典控制理論等等，甚至很冷門的Pseudo Inverse、牛頓勘根、Levy’s method做頻率域曲線擬合</strong></p><p><strong>同時我也把我的指標相關觀念釐清了很多，也奠定了我後來念資工的基礎</strong></p><hr><h2 id="三、中興資工碩士生的我-待補充"><a href="#三、中興資工碩士生的我-待補充" class="headerlink" title="三、中興資工碩士生的我(待補充)"></a>三、中興資工碩士生的我(待補充)</h2>]]></content>
    
    
    <categories>
      
      <category>雜記</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
