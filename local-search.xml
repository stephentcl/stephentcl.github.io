<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深度學習PyTorch基本操作</title>
    <link href="/2021/11/16/PyTorch_Basic/"/>
    <url>/2021/11/16/PyTorch_Basic/</url>
    
    <content type="html"><![CDATA[<h1 id="深度學習PyTorch基本操作"><a href="#深度學習PyTorch基本操作" class="headerlink" title="深度學習PyTorch基本操作 "></a>深度學習PyTorch基本操作 <span id="more"></span></h1><hr><p>大家都知道<strong>深度學習</strong>常用的兩個框架：</p><ul><li>PyTorch</li><li>Tensorflow<br>這兩個比較起來，Tensorflow相對好上手，不過兩者都有各自的愛好者擁戴。那今天就先來介紹一下PyTorch的基本操作吧。以下的操作適合在Google的Colab裡面執行。</li></ul><hr><h2 id="1-甚麼是Tensor"><a href="#1-甚麼是Tensor" class="headerlink" title="1.甚麼是Tensor?"></a>1.甚麼是Tensor?</h2><p>所謂張量Tensor就數學的定義來看，0階的張量就是純量、1階的張量就是向量、二階的張量就是矩陣也可以為二維的向量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>z = torch.Tensor(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">##後面引數為其維度</span><br>z   <span class="hljs-comment">##用多維的list去達成張量</span><br></code></pre></td></tr></table></figure><p>其輸出結果：<br>tensor([[2.8339e+01, 3.0683e-41, 7.0065e-44, 6.8664e-44, 6.3058e-44],<br>        [6.7262e-44, 7.9874e-44, 6.3058e-44, 7.0065e-44, 7.8473e-44],<br>        [1.1771e-43, 6.8664e-44, 7.0065e-44, 8.1275e-44, 7.0065e-44],<br>        [7.8473e-44, 8.1275e-44, 6.7262e-44, 7.7071e-44, 6.4460e-44]])</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#dtype為data type可以印出資料型態 </span><br><span class="hljs-comment">#裡面的.float32代表他的浮點數用float32做計算</span><br><span class="hljs-comment">#.dtype可以用來驗證兩個tensor有沒有一樣</span><br>z.dtype<br></code></pre></td></tr></table></figure><p>其輸出結果為：<br>torch.float32</p><hr><h2 id="2-浮點數的Tensor宣告方法"><a href="#2-浮點數的Tensor宣告方法" class="headerlink" title="2.浮點數的Tensor宣告方法"></a>2.浮點數的Tensor宣告方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.FloatTensor(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">##浮點數的Tensor宣告方法</span><br>a<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>tensor([[2.8328e+01, 3.0683e-41, 7.0065e-44, 6.8664e-44, 6.3058e-44],<br>        [6.7262e-44, 7.9874e-44, 6.3058e-44, 7.0065e-44, 7.8473e-44],<br>        [1.1771e-43, 6.8664e-44, 7.0065e-44, 8.1275e-44, 7.1466e-44],<br>        [7.1466e-44, 8.1275e-44, 7.2868e-44, 6.7262e-44, 6.4460e-44]])</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">b = torch.FloatTensor([[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]])  <span class="hljs-comment">##  [[2,3]]代表二維</span><br>b<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>tensor([[2., 3.],[4., 5.]])</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a.dtype<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>torch.float32</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">b.dtype<br></code></pre></td></tr></table></figure><p>其輸出結果：<br>torch.float32</p><hr>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>雜記</title>
    <link href="/2021/11/16/Hello/"/>
    <url>/2021/11/16/Hello/</url>
    
    <content type="html"><![CDATA[<h1 id="半路出家的資訊工程師-amp-機械工程師"><a href="#半路出家的資訊工程師-amp-機械工程師" class="headerlink" title="半路出家的資訊工程師 &amp; 機械工程師 "></a>半路出家的資訊工程師 &amp; 機械工程師 <span id="more"></span></h1><hr><p><strong>大家好，我是Stephen，我是一個雙碩士的資訊工程師</strong> </p><ul><li>105年畢業於交大機械碩士班自動控制組</li><li>在109年以第三名入學甄試進來中興資訊工程與科學學系就讀在職專班</li></ul><p><strong>目前在於中興大學喻石生老師門下，來說說為啥我會想要再念一個資工碩士好了有以下幾個原因：</strong></p><ul><li>機械系傳統產業普通低薪，工研院的薪資竟然也有PR75以上了，其中有很多慣老闆。</li><li>機械系主要是學理推導，但到了最後還是不免俗的要導入Deep Learning，簡單說就是技術瓶頸啦。<br>(工業4.0之後甚至到Digital Twin完全脫離不了AIoT等相關技術)</li><li>當然最重要的是我小時候覺得那些駭客真的好厲害，後來漸漸對程式語言有莫大的好奇心(但長大後才發現不是每個資訊工程師都是駭客)</li></ul><hr><h2 id="一、交大機械碩士生的我"><a href="#一、交大機械碩士生的我" class="headerlink" title="一、交大機械碩士生的我"></a>一、交大機械碩士生的我</h2><p>我高中畢業後，大學就讀於<strong>台灣科技大學工程不分系</strong>，後來大二分流進入了機械系，單單僅是因為不想碰化學，不是因為我化學不好而是討厭背科，其實現在回想以前很想說其實台灣的教育是蠻失敗的，小孩完全不知道自己的興趣所在。</p><p>讀著讀著，我很早就決定，我要大學瘋狂的玩，然後在瘋狂地念書考研究所，所以其實大學四年該玩得我都有玩到，後來研究所考試也誤打誤撞的考進<strong>交大機械研究所自動控制組</strong>。</p><blockquote><p><strong>但交大研究所這段時間卻是我人生中另外轉捩點。</strong></p></blockquote><p>原因在於大學時期因為大一跳級選修大二的C語言程式，剛好選到了一位大刀老師，一位思緒很跳躍的老師，很遺憾的這堂課沒有點名分數，我再怎麼認真，同學都是學長姊完全沒有人照應討論，想當然我就只好二退了，至此我開始害怕程式語言。</p><p>上了研究所後，是我人生中第一次好好的回想起大學所學的C語言，於是開始了我的啟蒙之路，從最基本的8051開始，了解時脈的CLK、程式的執行緒、開始懂基本的GPIO、暫存器、RAM、SRAM、FLASH，漸漸地也開始學到了很多的電路Protocol，像是Uart、I2C、SPI、RS232等等</p><p>慢慢的我也開始跨入了不同單晶片的世代，Arduino、Raspberry pi，那時候開始學習了很多電子電機相關的知識，高等電路學等等，開始寫起了Ti MSP430系列及DSP F28305相關的韌體。</p><p>後來實驗室進了一台當時最火熱的3D印表機，從此我也日日夜夜的在印很多自己畫的機構，那當然在我的碩論裡肯定是要用上我自己畫的機構，Solidworks圖如下：<br><img src="https://i.imgur.com/dxyY1Vb.jpg" alt="自走車"><br>實際的成品如下：<br><img src="https://i.imgur.com/uogfUZE.jpg"><br><img src="https://i.imgur.com/rrvP6s6.jpg"></p><p>整體的架構像下面這張圖：<br><img src="https://i.imgur.com/P5A6FKz.png"></p><p>最後寫了一隻Android控制APP來控制整顆球的運動：<br><img src="https://i.imgur.com/ArOHB6L.png"></p><p>當然不免俗的碩論還有一堆公式推導，這部分頗無聊就容我在此省略哈</p><hr><h2 id="二、機械工程師的我"><a href="#二、機械工程師的我" class="headerlink" title="二、機械工程師的我"></a>二、機械工程師的我</h2><p>105年交大畢業後，進來了<strong>工研院智慧機械中心開始擔任研發替代役副工程師</strong>，開始了我磨練C語言的底子，我們部門主要研發車床控制器，如果你不知道甚麼是車床請參考以下，他就是一種金屬加工的機器(人稱機械母機)<br><a href="https://zh.wikipedia.org/wiki/%E8%BB%8A%E5%BA%8A">車床維基百科</a></p><p><strong>我主要負責的項目有：</strong></p><ul><li><strong>一鍵調機開發(高階曲線擬合)</strong></li><li><strong>頻率響應波德圖功能開發(涉及了FFT等相關技術之後有機會在分享給大家)</strong> </li><li><strong>馬達慣量估測功能開發</strong></li><li><strong>主軸動平衡技術開發</strong></li></ul><p><strong>在這些項目中我把研究所所學的所有工程數學都拿出來用了，矩陣運算、傅立葉轉換、Laplace轉換、古典控制理論等等，甚至很冷門的Pseudo Inverse、牛頓勘根、Levy’s method做頻率域曲線擬合</strong></p><p><strong>同時我也把我的指標相關觀念釐清了很多，也奠定了我後來念資工的基礎</strong></p><hr><h2 id="三、中興資工碩士生的我-待補充"><a href="#三、中興資工碩士生的我-待補充" class="headerlink" title="三、中興資工碩士生的我(待補充)"></a>三、中興資工碩士生的我(待補充)</h2>]]></content>
    
    
    <categories>
      
      <category>雜記</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
